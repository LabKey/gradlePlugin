// N.B.  Whenever the gradlePlugins are compiled, you will see a warning about
//  "An illegal reflective access operation has occurred"
// until this issue is resolved: https://issues.apache.org/jira/browse/GROOVY-8339
// and Gradle is updated to whatever version of groovy has that fix.
import java.nio.file.Paths


buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.ajoberstar.grgit:grgit-gradle:${grgitGradleVersion}"
    }
}

plugins {
    id 'groovy'
    id 'java-library'
    id "com.jfrog.artifactory" version "${artifactoryPluginVersion}" apply false
    id "org.ajoberstar.grgit" version "${grgitGradleVersion}" apply false
    id "maven-publish"
    id 'java-gradle-plugin'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation gradleApi()
    implementation localGroovy()
    api "org.apache.commons:commons-lang3:${commonsLang3Version}"
    api "org.apache.commons:commons-text:${commonsTextVersion}"
    api "commons-io:commons-io:${commonsIoVersion}"
    api "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
    implementation "org.apache.httpcomponents:httpcore:${httpcoreVersion}"
    api "org.apache.httpcomponents:httpclient:${httpclientVersion}"
    api "org.json:json:${jsonVersion}"
    implementation "com.graphql-java:graphql-java:${graphqlJavaVersion}"
    api "org.ajoberstar.grgit:grgit-gradle:${grgitGradleVersion}"
}

group 'org.labkey.build'
project.version = "3.1.0-SNAPSHOT"

gradlePlugin {
    plugins {
        antlr {
            id = 'org.labkey.build.antlr'
            implementationClass = 'org.labkey.gradle.plugin.Antlr'
        }
        api {
            id = 'org.labkey.build.api'
            implementationClass = 'org.labkey.gradle.plugin.Api'
        }
        applyLicenses {
            id = 'org.labkey.build.applyLicenses'
            implementationClass = 'org.labkey.gradle.plugin.ApplyLicenses'
        }
        base {
            id = 'org.labkey.build.base'
            implementationClass = 'org.labkey.gradle.plugin.LabKey'
        }
        database {
            id = 'org.labkey.build.database'
            implementationClass = 'org.labkey.gradle.plugin.Database'
        }
        distribution {
            id = 'org.labkey.build.distribution'
            implementationClass = 'org.labkey.gradle.plugin.Distribution'
        }
        fileModule {
            id = 'org.labkey.build.fileModule'
            implementationClass = 'org.labkey.gradle.plugin.FileModule'
        }
        gwt {
            id = 'org.labkey.build.gwt'
            implementationClass = 'org.labkey.gradle.plugin.Gwt'
        }
        javaModule {
            id = 'org.labkey.build.javaModule'
            implementationClass = 'org.labkey.gradle.plugin.JavaModule'
        }
        jsdoc {
            id = 'org.labkey.build.jsdoc'
            implementationClass = 'org.labkey.gradle.plugin.JsDoc'
        }
        jsp {
            id = 'org.labkey.build.jsp'
            implementationClass = 'org.labkey.gradle.plugin.Jsp'
        }
        module {
            id = 'org.labkey.build.module'
            implementationClass = 'org.labkey.gradle.plugin.Module'
        }
        multiGit {
            id = 'org.labkey.build.multiGit'
            implementationClass = 'org.labkey.gradle.plugin.MultiGit'
        }
        npmRun {
            id = 'org.labkey.build.npmRun'
            implementationClass = 'org.labkey.gradle.plugin.NpmRun'
        }
        serverDeploy {
            id = 'org.labkey.build.serverDeploy'
            implementationClass = 'org.labkey.gradle.plugin.ServerDeploy'
        }
        springConfig {
            id = 'org.labkey.build.springConfig'
            implementationClass = 'org.labkey.gradle.plugin.SpringConfig'
        }
        teamCity {
            id = 'org.labkey.build.teamCity'
            implementationClass = 'org.labkey.gradle.plugin.TeamCity'
        }
        testRunner {
            id = 'org.labkey.build.testRunner'
            implementationClass = 'org.labkey.gradle.plugin.TestRunner'
        }
        tomcat {
            id = 'org.labkey.build.tomcat'
            implementationClass = 'org.labkey.gradle.plugin.Tomcat'
        }
        uiTest {
            id = 'org.labkey.build.uiTest'
            implementationClass = 'org.labkey.gradle.plugin.UiTest'
        }
        webapp {
            id = 'org.labkey.build.webapp'
            implementationClass = 'org.labkey.gradle.plugin.Webapp'
        }
        xmlBeans {
            id = 'org.labkey.build.xmlBeans'
            implementationClass = 'org.labkey.gradle.plugin.XmlBeans'
        }
        xsddoc {
            id = 'org.labkey.build.xsddoc'
            implementationClass = 'org.labkey.gradle.plugin.XsdDoc'
        }
    }
}

if (project.file("moduleTemplate").exists())
{
    // create the empty directories that git does not include
    String templateDirPath = project.file("moduleTemplate").getPath();
    File sampleDataDir = Paths.get(templateDirPath, "test/sampledata").toFile();
    sampleDataDir.mkdirs();

    File moduleApiPackageDir = Paths.get(templateDirPath, "api-src/org/labkey/api/MODULE_DIR_NAME/").toFile();
    moduleApiPackageDir.mkdirs()

    File webDir = Paths.get(templateDirPath, "resources/web").toFile();
    webDir.mkdirs()

    project.tasks.register("zipModuleTemplate", Zip) {
        Zip zip ->
            zip.archiveFileName = "moduleTemplate.zip"
            zip.from project.file("moduleTemplate")
            zip.destinationDirectory.set(new File(project.projectDir, "src/main/resources"))
    }
    project.tasks.processResources.dependsOn(project.tasks.zipModuleTemplate)
}

project.tasks.register("zipDistributionResources", Zip) {
    Zip zip ->
        zip.archiveFileName = "distributionResources.zip"
        zip.from project.file("distributionResources")
        zip.destinationDirectory.set(new File(project.projectDir, "src/main/resources"))
}
project.tasks.processResources.dependsOn(project.tasks.zipDistributionResources)

if (hasProperty('artifactory_user') && hasProperty('artifactory_password'))
{
   publishing {
       repositories {
           if (project.version.contains("SNAPSHOT")) {
               maven {
                   url "${artifactory_contextUrl}/plugins-snapshot-local"
                   credentials {
                       username = artifactory_user
                       password = artifactory_password
                   }
                   authentication {
                       basic(BasicAuthentication)
                       // enable preemptive authentication to get around https://www.jfrog.com/jira/browse/RTFACT-4434
                   }
               }
           }
           else {
               maven {
                   url "${artifactory_contextUrl}/plugins-release"
                   credentials {
                       username = artifactory_user
                       password = artifactory_password
                   }
                   authentication {
                       basic(BasicAuthentication)
                       // enable preemptive authentication to get around https://www.jfrog.com/jira/browse/RTFACT-4434
                   }
               }
   
           }
       }
       publications {
           maven(MavenPublication) {
               artifactId = 'gradlePlugins'
               from components.java
           }
       }
   }
}
