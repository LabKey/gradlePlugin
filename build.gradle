// N.B.  Whenever the gradlePlugis are compiled, you will see a warning about 
//  "An illegal reflective access operation has occurred"
// until this issue is resolved: https://issues.apache.org/jira/browse/GROOVY-8339
// and Gradle is updated to whatever version of groovy has that fix.
import java.nio.file.Paths


buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:${artifactoryPluginVersion}"
        classpath "org.ajoberstar.grgit:grgit-gradle:${grgitGradleVersion}"
    }
}

plugins {
    id 'groovy'
    id 'java-library'
    id "com.jfrog.artifactory" version "${artifactoryPluginVersion}" apply false
    id "org.ajoberstar.grgit" version "${grgitGradleVersion}" apply false
    id "maven-publish"
}

repositories {
    jcenter()
    maven {
        url "${artifactory_contextUrl}/libs-release"

        if (hasProperty('artifactory_user') && hasProperty('artifactory_password'))
        {
            credentials {
                username = artifactory_user
                password = artifactory_password
            }
            authentication {
                basic(BasicAuthentication)
                // enable preemptive authentication to get around https://www.jfrog.com/jira/browse/RTFACT-4434
            }
        }
    }
}

dependencies {
    implementation gradleApi()
    implementation localGroovy()
    api "org.apache.commons:commons-lang3:${commonsLang3Version}"
    api "commons-io:commons-io:${commonsIoVersion}"
    api "com.yahoo.platform.yui:yuicompressor:${yuiCompressorVersion}"
    api "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
    implementation "org.apache.httpcomponents:httpcore:${httpcoreVersion}"
    api "org.apache.httpcomponents:httpclient:${httpclientVersion}"
    api "org.json:json:${jsonVersion}"
    implementation "com.graphql-java:graphql-java:${graphqlJavaVersion}"
    api "org.ajoberstar.grgit:grgit-gradle:${grgitGradleVersion}"
}


project.version = "1.10.4"

if (project.file("moduleTemplate").exists())
{
    // create the empty directories that git does not include
    String templateDirPath = project.file("moduleTemplate").getPath();
    File sampleDataDir = Paths.get(templateDirPath, "test/sampledata").toFile();
    sampleDataDir.mkdirs();

    File moduleApiPackageDir = Paths.get(templateDirPath, "api-src/org/labkey/api/MODULE_DIR_NAME/").toFile();
    moduleApiPackageDir.mkdirs()

    File webDir = Paths.get(templateDirPath, "resources/web").toFile();
    webDir.mkdirs()

    project.tasks.register("zipModuleTemplate", Zip) {
        Zip zip ->
            zip.archiveFileName = "moduleTemplate.zip"
            zip.from project.file("moduleTemplate")
            zip.destinationDirectory = new File(project.projectDir, "src/main/resources")
    }
    project.tasks.processResources.dependsOn(project.tasks.zipModuleTemplate)
}

project.tasks.register("zipDistributionResources", Zip) {
    Zip zip ->
        zip.archiveFileName = "distributionResources.zip"
        zip.from project.file("distributionResources")
        zip.destinationDirectory = new File(project.projectDir, "src/main/resources")
}
project.tasks.processResources.dependsOn(project.tasks.zipDistributionResources)

publishing {
    publications {
        mavenJava (MavenPublication) {
            groupId 'org.labkey.build'
            artifactId 'gradlePlugins'
            from components.java
        }
    }
}


if (project.hasProperty("doPluginPublishing") && project.hasProperty('artifactory_contextUrl') && project.hasProperty('artifactory_user') && project.hasProperty('artifactory_password'))
{
    apply plugin: 'com.jfrog.artifactory'
    artifactory {
        contextUrl = "${artifactory_contextUrl}"
        publish {
            repository {
                repoKey = project.version.endsWith('-SNAPSHOT') ? 'plugins-snapshot-local' : "plugins-release-local"
                username = "${artifactory_user}"
                password = "${artifactory_password}"
                maven = true
            }
            defaults {
                publications ('mavenJava')
                publishPom = true
                publishIvy = false
            }
        }
    }
}

