import java.nio.file.Paths

apply plugin: "groovy"

repositories {
    jcenter()
    maven {
        url "${artifactory_contextUrl}/libs-release"

        if (hasProperty('artifactory_user') && hasProperty('artifactory_password'))
        {
            credentials {
                username = artifactory_user
                password = artifactory_password
            }
            authentication {
                basic(BasicAuthentication)
                // enable preemptive authentication to get around https://www.jfrog.com/jira/browse/RTFACT-4434
            }
        }
    }
}

dependencies {
    compile gradleApi()
    compile localGroovy()
    compile "org.apache.commons:commons-lang3:${commonsLang3Version}"
    compile "commons-io:commons-io:${commonsIoVersion}"
    compile "com.yahoo.platform.yui:yuicompressor:${yuiCompressorVersion}"
    compile 'org.ajoberstar:grgit:2.3.0'
}

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:${buildInfoExtractorGradleVersion}"
    }
}

apply plugin: 'maven-publish'

project.version = "1.4.0-SNAPSHOT"

if (project.file("moduleTemplate").exists())
{
    // create the empty directories that git does not include
    String templateDirPath = project.file("moduleTemplate").getPath();
    File sampleDataDir = Paths.get(templateDirPath, "test/sampledata").toFile();
    sampleDataDir.mkdirs();

    File moduleApiPackageDir = Paths.get(templateDirPath, "api-src/org/labkey/api/MODULE_DIR_NAME/").toFile();
    moduleApiPackageDir.mkdirs()

    File webDir = Paths.get(templateDirPath, "resources/web").toFile();
    webDir.mkdirs()

    project.tasks.register("zipModuleTemplate", Zip) {
        Zip zip ->
            zip.archiveName = "moduleTemplate.zip"
            zip.from project.file("moduleTemplate")
            zip.destinationDir = new File(project.projectDir, "src/main/resources") 
    }
    project.tasks.processResources.dependsOn(project.tasks.zipModuleTemplate)
}

publishing {
    publications {
        mavenJava (MavenPublication) {
            groupId 'org.labkey.build'
            artifactId 'gradlePlugins'
            from components.java
        }
    }
}


if (project.hasProperty('artifactory_contextUrl') && project.hasProperty('artifactory_user') && project.hasProperty('artifactory_password'))
{
    apply plugin: 'com.jfrog.artifactory'
    artifactory {
        contextUrl = "${artifactory_contextUrl}"
        publish {
            repository {
                repoKey = project.version.endsWith('-SNAPSHOT') ? 'plugins-snapshot-local' : "plugins-release-local"
                username = "${artifactory_user}"
                password = "${artifactory_password}"
                maven = true
            }
            defaults {
                publications ('mavenJava')
                publishPom = true
                publishIvy = false
            }
        }
//        resolve {
//            repository {
//                repoKey = project.version.endsWith('-SNAPSHOT') ? 'plugins-snapshot-local' : "plugins-release"
//            }
//        }
    }
}

